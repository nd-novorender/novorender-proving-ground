{
  "version": 3,
  "sources": ["/projects/Novorender/ts/dist/offline/opfs/worker/index.ts", "/projects/Novorender/ts/dist/offline/opfs/worker/worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\r\nimport type { AppendStreamResponse, CloseStreamResponse, ConnectResponse, CreateDirResponse, DeleteAllResponse, DeleteDirResponse, DeleteFilesResponse, DirsResponse, FileSizesResponse, FilesResponse, IORequest, IOResponse, OpenStreamResponse, ReadResponse, WriteResponse } from \"../messages\";\r\n/** @internal Handle messages on behalf of IO worker. */\r\nexport async function handleIOWorkerMessages(message: MessageEvent<ConnectResponse | IORequest>) {\r\n    const data = message.data;\r\n    switch (data.kind) {\r\n        case \"connect\": {\r\n            const { port } = data;\r\n            if (port) {\r\n                // console.log(\"offline io worker connected!\");\r\n                port.onmessage = async (message: MessageEvent<IORequest>) => {\r\n                    // handle I/O messages from service worker\r\n                    const { response, transfer } = await handleIORequest(message.data);\r\n                    if (response) {\r\n                        port.postMessage(response, transfer);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        default: {\r\n            // handle I/O messages from main thread\r\n            const { response, transfer } = await handleIORequest(data);\r\n            if (response) {\r\n                self.postMessage(response, { transfer });\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nconst rootPromise = navigator.storage.getDirectory();\r\nconst dirHandles = new Map<string, FileSystemDirectoryHandle>();\r\nconst journalHandles = new Map<string, LockedHandle>();\r\nconst streamHandles = new Map<string, StreamHandle>();\r\n\r\ninterface StreamHandle {\r\n    readonly accessHandle: FileSystemSyncAccessHandle;\r\n    offset: number;\r\n    readonly size: number;\r\n    readonly file: string;\r\n    readonly dir: string;\r\n}\r\n\r\nclass LockedHandle {\r\n    constructor(handle: FileSystemSyncAccessHandle) {\r\n        this.handle = handle;\r\n        this.lockPromise = Promise.resolve();\r\n    }\r\n\r\n    private lockPromise: Promise<void>;\r\n    private handle: FileSystemSyncAccessHandle;\r\n    async lock() {\r\n        await this.lockPromise;\r\n        let unlock: (() => void) | undefined;\r\n        this.lockPromise = new Promise<void>(resolve => {\r\n            unlock = resolve;\r\n        });\r\n        return { handle: this.handle, unlock: unlock! };\r\n    }\r\n}\r\n\r\nasync function getDirHandle(name: string) {\r\n    let dirHandle = dirHandles.get(name);\r\n    if (!dirHandle) {\r\n        const root = await rootPromise;\r\n        dirHandle = await root.getDirectoryHandle(name);\r\n        dirHandles.set(name, dirHandle);\r\n    }\r\n    return dirHandle;\r\n}\r\n\r\nasync function getGetJournalHandle(name: string, reset: boolean) {\r\n    let journalHandle = journalHandles.get(name);\r\n    if (journalHandle && reset) {\r\n        const { handle, unlock } = await journalHandle.lock();\r\n        handle.close();\r\n        unlock();\r\n        journalHandle = undefined;\r\n    }\r\n    if (!journalHandle) {\r\n        const dirHandle = await getDirHandle(name);\r\n        const fileHandle = await dirHandle.getFileHandle(\"journal\", { create: true });\r\n        const accessHandle = await fileHandle.createSyncAccessHandle();\r\n        journalHandle = new LockedHandle(accessHandle);\r\n        journalHandles.set(name, journalHandle);\r\n    }\r\n    return journalHandle;\r\n}\r\n\r\n\r\nasync function closeJournal(name: string) {\r\n    let journalHandle = journalHandles.get(name);\r\n    if (journalHandle) {\r\n        const { handle, unlock } = await journalHandle.lock();\r\n        handle.close();\r\n        const dirHandle = await getDirHandle(name);\r\n        dirHandle.removeEntry(\"journal\");\r\n        unlock();\r\n        journalHandles.delete(name);\r\n    }\r\n    return journalHandle;\r\n}\r\n\r\n\r\n\r\nfunction exhaustiveGuard(_value: never): never {\r\n    throw new Error(`Unknown IO request message: ${JSON.stringify(_value)}`);\r\n}\r\n\r\ninterface ResponseMessage {\r\n    readonly response?: IOResponse;\r\n    readonly transfer: Transferable[];\r\n}\r\n\r\nasync function handleIORequest(data: IORequest): Promise<ResponseMessage> {\r\n    let response: IOResponse | undefined;\r\n    let transfer: Transferable[] = [];\r\n    switch (data.kind) {\r\n        case \"create_dir\": {\r\n            let error: string | undefined;\r\n            try {\r\n                await createDir(data.dir);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"create_dir\", id: data.id, error } as const satisfies CreateDirResponse;\r\n            break;\r\n        }\r\n        case \"dirs\": {\r\n            let error: string | undefined;\r\n            let dirs: readonly string[] = [];\r\n            try {\r\n                dirs = await dirNames();\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"dirs\", id: data.id, dirs, error } as const satisfies DirsResponse;\r\n            break;\r\n        }\r\n        case \"files\": {\r\n            let error: string | undefined;\r\n            let files: readonly string[] = [];\r\n            try {\r\n                files = await fileNames(data.dir);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"files\", id: data.id, files, error } as const satisfies FilesResponse;\r\n            break;\r\n        }\r\n        case \"file_sizes\": {\r\n            let error: string | undefined;\r\n            let sizes: (number | undefined)[] = [];\r\n            try {\r\n                sizes = await fileSizes(data.dir, data.files);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"file_sizes\", id: data.id, sizes, error } as const satisfies FileSizesResponse;\r\n            break;\r\n        }\r\n        case \"read\": {\r\n            let error: string | undefined;\r\n            let buffer: ArrayBuffer | undefined;\r\n            try {\r\n                buffer = data.file == \"journal\" ? await readJournal(data.dir) : await readFile(data.dir, data.file);\r\n                if (buffer) {\r\n                    transfer.push(buffer);\r\n                }\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"read\", id: data.id, buffer, error } as const satisfies ReadResponse;\r\n            break;\r\n        }\r\n        case \"write\": {\r\n            let error: string | undefined;\r\n            try {\r\n                await writeFile(data.dir, data.file, data.buffer);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n                console.warn(`${data.file}: ${error}`);\r\n            }\r\n            response = { kind: \"write\", id: data.id, error } as const satisfies WriteResponse;\r\n            break;\r\n        }\r\n        case \"open_write_stream\": {\r\n            let error: string | undefined;\r\n            try {\r\n                const handle = await createFile(data.dir, data.file, data.size);\r\n                const key = `${data.dir}/${data.file}`;\r\n                streamHandles.set(key, handle);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n                console.warn(`${data.file}: ${error}`);\r\n            }\r\n            response = { kind: \"open_write_stream\", id: data.id, error } as const satisfies OpenStreamResponse;\r\n            break;\r\n        }\r\n        case \"append_stream\": {\r\n            let error: string | undefined;\r\n            try {\r\n                const key = `${data.dir}/${data.file}`;\r\n                const handle = streamHandles.get(key);\r\n                if (handle) {\r\n                    await appendfile(handle, data.buffer);\r\n                } else {\r\n                    throw new Error(\"Handle is not opened!\");\r\n                }\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n                console.warn(`${data.file}: ${error}`);\r\n            }\r\n            response = { kind: \"append_stream\", id: data.id, error } as const satisfies AppendStreamResponse;\r\n            break;\r\n        }\r\n\r\n        case \"close_write_stream\": {\r\n            let error: string | undefined;\r\n            try {\r\n                const key = `${data.dir}/${data.file}`;\r\n                const handle = streamHandles.get(key);\r\n                if (handle) {\r\n                    finalizeFile(handle);\r\n                    streamHandles.delete(key);\r\n                } else {\r\n                    throw new Error(\"Handle is not opened!\");\r\n                }\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n                console.warn(`${data.file}: ${error}`);\r\n            }\r\n            response = { kind: \"close_write_stream\", id: data.id, error } as const satisfies CloseStreamResponse;\r\n            break;\r\n        }\r\n\r\n\r\n        case \"delete_files\": {\r\n            let error: string | undefined;\r\n            try {\r\n                await deleteFiles(data.dir, data.files);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"delete_files\", id: data.id, error } as const satisfies DeleteFilesResponse;\r\n            break;\r\n        }\r\n        case \"delete_dir\": {\r\n            let error: string | undefined;\r\n            try {\r\n                await deleteDir(data.dir);\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"delete_dir\", id: data.id, error } as const satisfies DeleteDirResponse;\r\n            break;\r\n        }\r\n        case \"delete_all\": {\r\n            let error: string | undefined;\r\n            try {\r\n                await deleteAll();\r\n            } catch (ex: any) {\r\n                error = ex.message ?? ex.toString();\r\n            }\r\n            response = { kind: \"delete_all\", id: data.id, error } as const satisfies DeleteAllResponse;\r\n            break;\r\n        }\r\n        default: exhaustiveGuard(data);\r\n    }\r\n    return { response, transfer } as const;\r\n};\r\n\r\n/** @internal */\r\nexport type DirEntryValue = FileSystemDirectoryHandle | FileSystemFileHandle;\r\n/** @internal */\r\nexport type DirEntry = readonly [string, DirEntryValue];\r\n\r\nasync function dirEntries(dir: FileSystemDirectoryHandle): Promise<readonly DirEntry[]> {\r\n    let output: DirEntry[] = [];\r\n    // @ts-expect-error\r\n    const entries: AsyncIterableIterator<DirEntry> = dir.entries(); // this method is not yet included in ts types.\r\n    for await (const entry of entries) { // use Array.fromAsync() instead when it's available in chrome.\r\n        // TODO: filter by type?\r\n        output.push(entry);\r\n    }\r\n    return output;\r\n}\r\n\r\nasync function createDir(dir: string): Promise<void> {\r\n    const root = await rootPromise;\r\n    await root.getDirectoryHandle(dir, { create: true });\r\n}\r\n\r\nasync function dirNames(): Promise<readonly string[]> {\r\n    const root = await rootPromise;\r\n    const entries = await dirEntries(root);\r\n    const dirs = entries.filter(([_, value]) => value.kind == \"directory\").map(([name]) => name);\r\n    return dirs;\r\n}\r\n\r\nasync function fileNames(dir: string): Promise<readonly string[]> {\r\n    const dirHandle = await getDirHandle(dir);\r\n    const entries = await dirEntries(dirHandle);\r\n    const files = entries.filter(([_, value]) => value.kind == \"file\").map(([name]) => name);\r\n    return files;\r\n}\r\n\r\nasync function readFile(dir: string, filename: string) {\r\n    try {\r\n        const dirHandle = await getDirHandle(dir);\r\n        const fileHandle = await dirHandle.getFileHandle(filename);\r\n        const accessHandle = await fileHandle.createSyncAccessHandle();\r\n        const size = accessHandle.getSize();\r\n        const buffer = new Uint8Array(size);\r\n        accessHandle.read(buffer);\r\n        accessHandle.close();\r\n        return buffer.buffer;\r\n    } catch (error: unknown) {\r\n        if (error instanceof DOMException && error.name == \"NotFoundError\") {\r\n            return undefined;\r\n        } else {\r\n            console.log({ error });\r\n            throw error;\r\n        }\r\n    }\r\n    // const file = await fileHandle.getFile();\r\n    // return file.arrayBuffer(); // Safari doesn't support transferrable streams, so we resort to arraybuffer instead.\r\n}\r\n\r\nasync function fileSizes(dir: string, files?: readonly string[]) {\r\n    const sizes: (number | undefined)[] = [];\r\n    files ??= await fileNames(dir);\r\n    for (const filename of files) {\r\n        let size: number | undefined;\r\n        try {\r\n            const dirHandle = await getDirHandle(dir);\r\n            const fileHandle = await dirHandle.getFileHandle(filename);\r\n            const accessHandle = await fileHandle.createSyncAccessHandle();\r\n            size = accessHandle.getSize();\r\n            accessHandle.close();\r\n        } catch (error: unknown) {\r\n            if (!(error instanceof DOMException && error.name == \"NotFoundError\")) {\r\n                console.log({ error });\r\n                throw error;\r\n            }\r\n        }\r\n        sizes.push(size);\r\n    }\r\n    return sizes;\r\n}\r\n\r\n\r\nasync function createFile(dir: string, file: string, size: number): Promise<StreamHandle> {\r\n    const dirHandle = await getDirHandle(dir);\r\n    const fileHandle = await dirHandle.getFileHandle(file, { create: true });\r\n    const accessHandle = await fileHandle.createSyncAccessHandle();\r\n    accessHandle.truncate(size);\r\n    return { accessHandle, offset: 0, dir, file, size };\r\n}\r\n\r\nasync function appendfile(streamHandle: StreamHandle, buffer: ArrayBuffer) {\r\n    const { accessHandle, offset } = streamHandle;\r\n    const bytesWritten = accessHandle.write(new Uint8Array(buffer), { at: offset });\r\n    console.assert(bytesWritten == buffer.byteLength);\r\n    streamHandle.offset += bytesWritten;\r\n}\r\n\r\nasync function finalizeFile(streamHandle: StreamHandle) {\r\n    const { accessHandle, offset, dir, file, size } = streamHandle;\r\n    accessHandle.flush();\r\n    accessHandle.close();\r\n    if (size == offset) {\r\n        await appendJournal(dir, file, size);\r\n    }\r\n    else {\r\n        const dirHandle = await getDirHandle(dir);\r\n        dirHandle.removeEntry(file);\r\n    }\r\n}\r\n\r\nasync function writeFile(dir: string, file: string, buffer: ArrayBuffer) {\r\n    // console.log(`${dir}/${file}[${buffer.byteLength}]`);\r\n    let accessHandle: FileSystemSyncAccessHandle | undefined;\r\n    try {\r\n        const dirHandle = await getDirHandle(dir);\r\n        const fileHandle = await dirHandle.getFileHandle(file, { create: true });\r\n        accessHandle = await fileHandle.createSyncAccessHandle();\r\n        accessHandle.truncate(buffer.byteLength);\r\n        const bytesWritten = accessHandle.write(new Uint8Array(buffer), { at: 0 });\r\n        console.assert(bytesWritten == buffer.byteLength);\r\n        accessHandle.flush();\r\n        await appendJournal(dir, file, bytesWritten);\r\n    } finally {\r\n        accessHandle?.close();\r\n    }\r\n\r\n}\r\n\r\nasync function readJournal(dir: string) {\r\n    let dispose: (() => void) | undefined;\r\n    try {\r\n        const journalHandle = await getGetJournalHandle(dir, true);\r\n        const { handle, unlock } = await journalHandle.lock();\r\n        dispose = unlock;\r\n        const size = handle.getSize();\r\n        const buffer = new Uint8Array(size);\r\n        handle.read(buffer);\r\n\r\n        return buffer.buffer;\r\n    } catch (error: unknown) {\r\n        if (error instanceof DOMException && error.name == \"NotFoundError\") {\r\n            return undefined;\r\n        } else {\r\n            console.log({ error });\r\n            throw error;\r\n        }\r\n    } finally {\r\n        dispose?.();\r\n    }\r\n}\r\n\r\nasync function appendJournal(dir: string, file: string, size: number) {\r\n    let dispose: (() => void) | undefined;\r\n    try {\r\n        const journalHandle = await getGetJournalHandle(dir, false);\r\n        const { handle, unlock } = await journalHandle.lock();\r\n        dispose = unlock;\r\n        const text = `${file},${size}\\n`;\r\n        const bytes = new TextEncoder().encode(text);\r\n        handle.write(bytes, { at: handle.getSize() });\r\n        handle.flush();\r\n    } finally {\r\n        dispose?.();\r\n    }\r\n\r\n}\r\n\r\nasync function deleteFiles(dir: string, files: readonly string[]) {\r\n    const dirHandle = await getDirHandle(dir);\r\n    closeJournal(dir);\r\n    for (const file of files) {\r\n        dirHandle.removeEntry(file);\r\n    }\r\n}\r\n\r\nasync function deleteDir(dir: string) {\r\n    const root = await rootPromise;\r\n    closeJournal(dir);\r\n    root.removeEntry(dir, { recursive: true });\r\n}\r\n\r\nasync function deleteAll() {\r\n    const root = await rootPromise;\r\n    const entries = await dirEntries(root);\r\n    for (const [name] of entries) {\r\n        closeJournal(name);\r\n        root.removeEntry(name, { recursive: true });\r\n    }\r\n}\r\n\r\n", "import { handleIOWorkerMessages } from \".\";\r\n\r\nonmessage = handleIOWorkerMessages;"],
  "mappings": "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",
  "names": ["message"]
}
